<?php

namespace Cradle\OAuth;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:01.
 */
class Cradle_OAauth_OAuth1_Test extends TestCase
{
    /**
     * @var ImageHandler
     */
    protected $object;

    protected $consumerKey;
    protected $consumerSecret;
    protected $urlRedirect;
    protected $urlRequest;
    protected $urlAuthorize;
    protected $urlAccess;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->consumerKey = 'foobar_consumer_key';
        $this->consumerSecret = 'foobar_consumer_secret';
        $this->urlRedirect = 'http://foobar.com/url_redirect';
        $this->urlRequest = 'http://foobar.com/url_request';
        $this->urlAuthorize = 'http://foobar.com/url_authorize';
        $this->urlAccess = 'http://foobar.com/url_access';

        $this->object = new OAuth1(
            $this->consumerKey,
            $this->consumerSecret,
            $this->urlRedirect,
            $this->urlRequest,
            $this->urlAuthorize,
            $this->urlAccess,
            function($options) {
                $options['response'] = json_encode($options);
                return $options;
            }
        );
    }

    /**
     * @covers Cradle\OAuth\OAuth1::__construct
     */
    public function test__construct()
    {
        try {
            $object = new OAuth1(
                $this->consumerKey,
                $this->consumerSecret,
                $this->urlRedirect,
                $this->urlRequest,
                $this->urlAuthorize,
                $this->urlAccess,
                function($options) {
                    $options['response'] = json_encode($options);
                    return $options;
                }
            );
        } catch(Exception $e) {
        }

        $this->assertInstanceOf('Cradle\OAuth\OAuth1', $object);
    }


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Cradle\OAuth\OAuth1::getAccessTokens
     */
    public function testGetAccessTokens()
    {   
        $token = 'foobar_token';
        $secret = 'foobar_secret';
        $verifier = 'foobar_verifier';
        $actual = $this->object->getAccessTokens($token, $secret, $verifier);
        $actual = implode('|', $actual);
        
        $this->assertContains('oauth_signature', $actual);
        $this->assertContains('oauth_signature_method', $actual);
        $this->assertContains('oauth_nonce', $actual);
        $this->assertContains('oauth_verifier', $actual);
        $this->assertContains('oauth_timestamp', $actual);
        $this->assertContains('oauth_version', $actual);
    }

    /**
     * @covers Cradle\OAuth\OAuth1::getLoginUrl
     */
    public function testGetLoginUrl()
    {
        $token = 'foobar_token';
        $actual = $this->object->getLoginUrl($token);
        
        $this->assertEquals(
                $this->urlAuthorize . '?oauth_token=' . $token .
                '&oauth_callback=' . urlencode($this->urlRedirect) .
                '&force_login=0', $actual);
    }

    /**
     * @covers Cradle\OAuth\OAuth1::getRequestTokens
     */
    public function testGetRequestTokens()
    {
        $actual = $this->object->getRequestTokens();
        $actual = implode('|', $actual);

        $this->assertContains('oauth_signature', $actual);
        $this->assertContains('oauth_signature_method', $actual);
        $this->assertContains('oauth_nonce', $actual);
        $this->assertContains('oauth_timestamp', $actual);
        $this->assertContains('oauth_version', $actual);
    }

    /**
     * @covers Cradle\OAuth\OAuth1::get
     */
    public function testGet()
    {
        $accessToken = [
            'oauth_token' => 'foobar_oauth_token',
            'oauth_token_secret' => 'foobar_oauth_token_secret',
        ];

        $actual = $this->object->get($this->urlAccess, $accessToken, []);

        $this->assertContains('oauth_token', $actual[CURLOPT_HTTPHEADER][0]);
        $this->assertContains('oauth_signature_method', $actual[CURLOPT_HTTPHEADER][0]);
        $this->assertContains('oauth_nonce', $actual[CURLOPT_HTTPHEADER][0]);
        $this->assertContains('oauth_timestamp', $actual[CURLOPT_HTTPHEADER][0]);
        $this->assertContains('oauth_version', $actual[CURLOPT_HTTPHEADER][0]);
    }
}
