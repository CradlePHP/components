<?php

namespace Cradle\IO;

use StdClass;
use PHPUnit\Framework\TestCase;
use Cradle\IO\IODispatcher;
use Cradle\IO\Request;
use Cradle\IO\Response;
use Cradle\IO\Router;
use Cradle\IO\Middleware;

use Cradle\Resolver\ResolverHandler;
use Cradle\Event\EventEmitter;
use Cradle\Profiler\InspectorHandler;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-28 at 11:36:33.
 */
class Cradle_IO_IOHandler_Test extends TestCase
{
  /**
   * @var IOHandler
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->object = new IOHandler;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
  }

  /**
   * @covers Cradle\IO\IOTrait::prepare
   */
  public function testPrepare()
  {
    $this->assertTrue($this->object->prepare());
  }

  /**
   * @covers Cradle\IO\IOTrait::process
   */
  public function testProcess()
  {
    $this->assertTrue($this->object->process(function() {
      return true;
    }));
  }

  /**
   * @covers Cradle\IO\IOTrait::shutdown
   */
  public function testShutdown()
  {
    $this->assertTrue($this->object->shutdown());
  }

  /**
   * @covers Cradle\IO\IOTrait::run
   */
  public function testRun()
  {
    $actual = $this->object->setProcessor(function() {
      return true;
    })->run();
    $this->assertTrue($actual);

    $actual = $this->object->setProcessor(function() {
      return false;
    })->run();
    $this->assertFalse($actual);

    $this->object->preprocess(function() {
      throw new \Exception('Foobar Exception');
    });

    $this->object->error(function($request, $response) {
      $response->setContent('Foobar Message');
      return false;
    });

    $actual = $this->object->run();
    $this->assertFalse($actual);
  }

  /**
   * @covers Cradle\IO\Middleware\PreProcessorTrait::getPreprocessor
   */
  public function testGetPreprocessor()
  {
    $instance = $this->object->getPreprocessor();
    $this->assertInstanceOf('Cradle\IO\Middleware', $instance);
  }

  /**
   * @covers Cradle\IO\Middleware\PreProcessorTrait::preprocess
   */
  public function testPreprocess()
  {
    $instance = $this->object->preprocess(function() {});
    $this->assertInstanceOf('Cradle\IO\IOHandler', $instance);
  }

  /**
   * @covers Cradle\IO\Middleware\PreProcessorTrait::setPreprocessor
   */
  public function testSetPreprocessor()
  {
    $instance = $this->object->setPreprocessor(new Middleware);
    $this->assertInstanceOf('Cradle\IO\IOHandler', $instance);
  }

  /**
   * @covers Cradle\IO\Middleware\PostProcessorTrait::getPostprocessor
   */
  public function testGetPostprocessor()
  {
    $instance = $this->object->getPostprocessor();
    $this->assertInstanceOf('Cradle\IO\Middleware', $instance);
  }

  /**
   * @covers Cradle\IO\Middleware\PostProcessorTrait::postprocess
   */
  public function testPostprocess()
  {
    $instance = $this->object->postprocess(function() {});
    $this->assertInstanceOf('Cradle\IO\IOHandler', $instance);
  }

  /**
   * @covers Cradle\IO\Middleware\PostProcessorTrait::setPostprocessor
   */
  public function testSetPostprocessor()
  {
    $instance = $this->object->setPostprocessor(new Middleware);
    $this->assertInstanceOf('Cradle\IO\IOHandler', $instance);
  }

  /**
   * @covers Cradle\IO\Middleware\ErrorProcessorTrait::getErrorProcessor
   */
  public function testGetErrorProcessor()
  {
    $instance = $this->object->getErrorProcessor();
    $this->assertInstanceOf('Cradle\IO\Middleware', $instance);
  }

  /**
   * @covers Cradle\IO\Middleware\ErrorProcessorTrait::error
   */
  public function testError()
  {
    $instance = $this->object->error(function() {});
    $this->assertInstanceOf('Cradle\IO\IOHandler', $instance);
  }

  /**
   * @covers Cradle\IO\Middleware\ErrorProcessorTrait::setErrorProcessor
   */
  public function testSetErrorProcessor()
  {
    $instance = $this->object->setErrorProcessor(new Middleware);
    $this->assertInstanceOf('Cradle\IO\IOHandler', $instance);
  }

  /**
   * @covers Cradle\IO\Request\RequestTrait::getRequest
   */
  public function testGetRequest()
  {
    $instance = $this->object->getRequest();
    $this->assertInstanceOf('Cradle\IO\Request', $instance);
  }

  /**
   * @covers Cradle\IO\Request\RequestTrait::setRequest
   */
  public function testSetRequest()
  {
    $instance = $this->object->setRequest(new Request);
    $this->assertInstanceOf('Cradle\IO\IOHandler', $instance);
  }

  /**
   * @covers Cradle\IO\Response\ResponseTrait::getResponse
   */
  public function testGetResponse()
  {
    $instance = $this->object->getResponse();
    $this->assertInstanceOf('Cradle\IO\Response', $instance);
  }

  /**
   * @covers Cradle\IO\Response\ResponseTrait::setResponse
   */
  public function testSetResponse()
  {
    $instance = $this->object->setResponse(new Response);
    $this->assertInstanceOf('Cradle\IO\IOHandler', $instance);
  }
}
